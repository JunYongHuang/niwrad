// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: realtime.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Net.Realtime {

  /// <summary>Holder for reflection information generated from realtime.proto</summary>
  public static partial class RealtimeReflection {

    #region Descriptor
    /// <summary>File descriptor for realtime.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RealtimeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5yZWFsdGltZS5wcm90bxIPbml3cmFkLnJlYWx0aW1lIpsECgZQYWNrZXQS",
            "EQoJc2VuZGVyX2lkGAEgASgJEhEKCWlzX3NlcnZlchgCIAEoCBISCgpyZWNp",
            "cGllbnRzGAMgAygJEjwKEHVwZGF0ZV90cmFuc2Zvcm0YBCABKAsyIC5uaXdy",
            "YWQucmVhbHRpbWUuVXBkYXRlVHJhbnNmb3JtSAASOQoPbmF2X21lc2hfdXBk",
            "YXRlGAUgASgLMh4ubml3cmFkLnJlYWx0aW1lLk5hdk1lc2hVcGRhdGVIABIn",
            "CgVzcGF3bhgGIAEoCzIWLm5pd3JhZC5yZWFsdGltZS5TcGF3bkgAEi8KDXJl",
            "cXVlc3Rfc3Bhd24YByABKAsyFi5uaXdyYWQucmVhbHRpbWUuU3Bhd25IABIr",
            "CgdkZXN0cm95GAggASgLMhgubml3cmFkLnJlYWx0aW1lLkRlc3Ryb3lIABIz",
            "Cg9yZXF1ZXN0X2Rlc3Ryb3kYCSABKAsyGC5uaXdyYWQucmVhbHRpbWUuRGVz",
            "dHJveUgAEiUKBG1lbWUYCiABKAsyFS5uaXdyYWQucmVhbHRpbWUuTWVtZUgA",
            "Ej4KEW1hdGNoX2luZm9ybWF0aW9uGAsgASgLMiEubml3cmFkLnJlYWx0aW1l",
            "Lk1hdGNoSW5mb3JtYXRpb25IABIzCgtpbml0aWFsaXplZBgMIAEoCzIcLm5p",
            "d3JhZC5yZWFsdGltZS5Jbml0aWFsaXplZEgAQgYKBHR5cGUiQAoPVXBkYXRl",
            "VHJhbnNmb3JtEi0KCXRyYW5zZm9ybRgBIAEoCzIaLm5pd3JhZC5yZWFsdGlt",
            "ZS5UcmFuc2Zvcm0iSgoNTmF2TWVzaFVwZGF0ZRIKCgJpZBgBIAEoBBItCgtk",
            "ZXN0aW5hdGlvbhgCIAEoCzIYLm5pd3JhZC5yZWFsdGltZS5WZWN0b3IzIowB",
            "CgVTcGF3bhIpCgNhbnkYASABKAsyGi5uaXdyYWQucmVhbHRpbWUuVHJhbnNm",
            "b3JtSAASJQoEdHJlZRgCIAEoCzIVLm5pd3JhZC5yZWFsdGltZS5UcmVlSAAS",
            "KQoGYW5pbWFsGAMgASgLMhcubml3cmFkLnJlYWx0aW1lLkFuaW1hbEgAQgYK",
            "BHR5cGUijgEKB0Rlc3Ryb3kSKQoDYW55GAEgASgLMhoubml3cmFkLnJlYWx0",
            "aW1lLlRyYW5zZm9ybUgAEiUKBHRyZWUYAiABKAsyFS5uaXdyYWQucmVhbHRp",
            "bWUuVHJlZUgAEikKBmFuaW1hbBgDIAEoCzIXLm5pd3JhZC5yZWFsdGltZS5B",
            "bmltYWxIAEIGCgR0eXBlIiUKBE1lbWUSCgoCaWQYASABKAQSEQoJbWVtZV9u",
            "YW1lGAIgASgJIiAKEE1hdGNoSW5mb3JtYXRpb24SDAoEc2VlZBgBIAEoBSIN",
            "CgtJbml0aWFsaXplZCJyCglUcmFuc2Zvcm0SCgoCaWQYASABKAQSKgoIcG9z",
            "aXRpb24YAiABKAsyGC5uaXdyYWQucmVhbHRpbWUuVmVjdG9yMxItCghyb3Rh",
            "dGlvbhgDIAEoCzIbLm5pd3JhZC5yZWFsdGltZS5RdWF0ZXJuaW9uIjUKBFRy",
            "ZWUSLQoJdHJhbnNmb3JtGAEgASgLMhoubml3cmFkLnJlYWx0aW1lLlRyYW5z",
            "Zm9ybSI3CgZBbmltYWwSLQoJdHJhbnNmb3JtGAEgASgLMhoubml3cmFkLnJl",
            "YWx0aW1lLlRyYW5zZm9ybSIqCgdWZWN0b3IzEgkKAXgYASABKAISCQoBeRgC",
            "IAEoAhIJCgF6GAMgASgCIjgKClF1YXRlcm5pb24SCQoBeBgBIAEoAhIJCgF5",
            "GAIgASgCEgkKAXoYAyABKAISCQoBdxgEIAEoAkIiWhFyZWFsdGltZTtyZWFs",
            "dGltZaoCDE5ldC5SZWFsdGltZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Net.Realtime.Packet), global::Net.Realtime.Packet.Parser, new[]{ "SenderId", "IsServer", "Recipients", "UpdateTransform", "NavMeshUpdate", "Spawn", "RequestSpawn", "Destroy", "RequestDestroy", "Meme", "MatchInformation", "Initialized" }, new[]{ "Type" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Net.Realtime.UpdateTransform), global::Net.Realtime.UpdateTransform.Parser, new[]{ "Transform" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Net.Realtime.NavMeshUpdate), global::Net.Realtime.NavMeshUpdate.Parser, new[]{ "Id", "Destination" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Net.Realtime.Spawn), global::Net.Realtime.Spawn.Parser, new[]{ "Any", "Tree", "Animal" }, new[]{ "Type" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Net.Realtime.Destroy), global::Net.Realtime.Destroy.Parser, new[]{ "Any", "Tree", "Animal" }, new[]{ "Type" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Net.Realtime.Meme), global::Net.Realtime.Meme.Parser, new[]{ "Id", "MemeName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Net.Realtime.MatchInformation), global::Net.Realtime.MatchInformation.Parser, new[]{ "Seed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Net.Realtime.Initialized), global::Net.Realtime.Initialized.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Net.Realtime.Transform), global::Net.Realtime.Transform.Parser, new[]{ "Id", "Position", "Rotation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Net.Realtime.Tree), global::Net.Realtime.Tree.Parser, new[]{ "Transform" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Net.Realtime.Animal), global::Net.Realtime.Animal.Parser, new[]{ "Transform" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Net.Realtime.Vector3), global::Net.Realtime.Vector3.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Net.Realtime.Quaternion), global::Net.Realtime.Quaternion.Parser, new[]{ "X", "Y", "Z", "W" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Packet : pb::IMessage<Packet> {
    private static readonly pb::MessageParser<Packet> _parser = new pb::MessageParser<Packet>(() => new Packet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Packet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Net.Realtime.RealtimeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Packet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Packet(Packet other) : this() {
      senderId_ = other.senderId_;
      isServer_ = other.isServer_;
      recipients_ = other.recipients_.Clone();
      switch (other.TypeCase) {
        case TypeOneofCase.UpdateTransform:
          UpdateTransform = other.UpdateTransform.Clone();
          break;
        case TypeOneofCase.NavMeshUpdate:
          NavMeshUpdate = other.NavMeshUpdate.Clone();
          break;
        case TypeOneofCase.Spawn:
          Spawn = other.Spawn.Clone();
          break;
        case TypeOneofCase.RequestSpawn:
          RequestSpawn = other.RequestSpawn.Clone();
          break;
        case TypeOneofCase.Destroy:
          Destroy = other.Destroy.Clone();
          break;
        case TypeOneofCase.RequestDestroy:
          RequestDestroy = other.RequestDestroy.Clone();
          break;
        case TypeOneofCase.Meme:
          Meme = other.Meme.Clone();
          break;
        case TypeOneofCase.MatchInformation:
          MatchInformation = other.MatchInformation.Clone();
          break;
        case TypeOneofCase.Initialized:
          Initialized = other.Initialized.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Packet Clone() {
      return new Packet(this);
    }

    /// <summary>Field number for the "sender_id" field.</summary>
    public const int SenderIdFieldNumber = 1;
    private string senderId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SenderId {
      get { return senderId_; }
      set {
        senderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_server" field.</summary>
    public const int IsServerFieldNumber = 2;
    private bool isServer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsServer {
      get { return isServer_; }
      set {
        isServer_ = value;
      }
    }

    /// <summary>Field number for the "recipients" field.</summary>
    public const int RecipientsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_recipients_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> recipients_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Recipients {
      get { return recipients_; }
    }

    /// <summary>Field number for the "update_transform" field.</summary>
    public const int UpdateTransformFieldNumber = 4;
    /// <summary>
    /// General physical objects
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Net.Realtime.UpdateTransform UpdateTransform {
      get { return typeCase_ == TypeOneofCase.UpdateTransform ? (global::Net.Realtime.UpdateTransform) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.UpdateTransform;
      }
    }

    /// <summary>Field number for the "nav_mesh_update" field.</summary>
    public const int NavMeshUpdateFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Net.Realtime.NavMeshUpdate NavMeshUpdate {
      get { return typeCase_ == TypeOneofCase.NavMeshUpdate ? (global::Net.Realtime.NavMeshUpdate) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.NavMeshUpdate;
      }
    }

    /// <summary>Field number for the "spawn" field.</summary>
    public const int SpawnFieldNumber = 6;
    /// <summary>
    /// Evolution
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Net.Realtime.Spawn Spawn {
      get { return typeCase_ == TypeOneofCase.Spawn ? (global::Net.Realtime.Spawn) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Spawn;
      }
    }

    /// <summary>Field number for the "request_spawn" field.</summary>
    public const int RequestSpawnFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Net.Realtime.Spawn RequestSpawn {
      get { return typeCase_ == TypeOneofCase.RequestSpawn ? (global::Net.Realtime.Spawn) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.RequestSpawn;
      }
    }

    /// <summary>Field number for the "destroy" field.</summary>
    public const int DestroyFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Net.Realtime.Destroy Destroy {
      get { return typeCase_ == TypeOneofCase.Destroy ? (global::Net.Realtime.Destroy) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Destroy;
      }
    }

    /// <summary>Field number for the "request_destroy" field.</summary>
    public const int RequestDestroyFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Net.Realtime.Destroy RequestDestroy {
      get { return typeCase_ == TypeOneofCase.RequestDestroy ? (global::Net.Realtime.Destroy) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.RequestDestroy;
      }
    }

    /// <summary>Field number for the "meme" field.</summary>
    public const int MemeFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Net.Realtime.Meme Meme {
      get { return typeCase_ == TypeOneofCase.Meme ? (global::Net.Realtime.Meme) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Meme;
      }
    }

    /// <summary>Field number for the "match_information" field.</summary>
    public const int MatchInformationFieldNumber = 11;
    /// <summary>
    /// Player
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Net.Realtime.MatchInformation MatchInformation {
      get { return typeCase_ == TypeOneofCase.MatchInformation ? (global::Net.Realtime.MatchInformation) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.MatchInformation;
      }
    }

    /// <summary>Field number for the "initialized" field.</summary>
    public const int InitializedFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Net.Realtime.Initialized Initialized {
      get { return typeCase_ == TypeOneofCase.Initialized ? (global::Net.Realtime.Initialized) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Initialized;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      UpdateTransform = 4,
      NavMeshUpdate = 5,
      Spawn = 6,
      RequestSpawn = 7,
      Destroy = 8,
      RequestDestroy = 9,
      Meme = 10,
      MatchInformation = 11,
      Initialized = 12,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Packet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Packet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SenderId != other.SenderId) return false;
      if (IsServer != other.IsServer) return false;
      if(!recipients_.Equals(other.recipients_)) return false;
      if (!object.Equals(UpdateTransform, other.UpdateTransform)) return false;
      if (!object.Equals(NavMeshUpdate, other.NavMeshUpdate)) return false;
      if (!object.Equals(Spawn, other.Spawn)) return false;
      if (!object.Equals(RequestSpawn, other.RequestSpawn)) return false;
      if (!object.Equals(Destroy, other.Destroy)) return false;
      if (!object.Equals(RequestDestroy, other.RequestDestroy)) return false;
      if (!object.Equals(Meme, other.Meme)) return false;
      if (!object.Equals(MatchInformation, other.MatchInformation)) return false;
      if (!object.Equals(Initialized, other.Initialized)) return false;
      if (TypeCase != other.TypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SenderId.Length != 0) hash ^= SenderId.GetHashCode();
      if (IsServer != false) hash ^= IsServer.GetHashCode();
      hash ^= recipients_.GetHashCode();
      if (typeCase_ == TypeOneofCase.UpdateTransform) hash ^= UpdateTransform.GetHashCode();
      if (typeCase_ == TypeOneofCase.NavMeshUpdate) hash ^= NavMeshUpdate.GetHashCode();
      if (typeCase_ == TypeOneofCase.Spawn) hash ^= Spawn.GetHashCode();
      if (typeCase_ == TypeOneofCase.RequestSpawn) hash ^= RequestSpawn.GetHashCode();
      if (typeCase_ == TypeOneofCase.Destroy) hash ^= Destroy.GetHashCode();
      if (typeCase_ == TypeOneofCase.RequestDestroy) hash ^= RequestDestroy.GetHashCode();
      if (typeCase_ == TypeOneofCase.Meme) hash ^= Meme.GetHashCode();
      if (typeCase_ == TypeOneofCase.MatchInformation) hash ^= MatchInformation.GetHashCode();
      if (typeCase_ == TypeOneofCase.Initialized) hash ^= Initialized.GetHashCode();
      hash ^= (int) typeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SenderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SenderId);
      }
      if (IsServer != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsServer);
      }
      recipients_.WriteTo(output, _repeated_recipients_codec);
      if (typeCase_ == TypeOneofCase.UpdateTransform) {
        output.WriteRawTag(34);
        output.WriteMessage(UpdateTransform);
      }
      if (typeCase_ == TypeOneofCase.NavMeshUpdate) {
        output.WriteRawTag(42);
        output.WriteMessage(NavMeshUpdate);
      }
      if (typeCase_ == TypeOneofCase.Spawn) {
        output.WriteRawTag(50);
        output.WriteMessage(Spawn);
      }
      if (typeCase_ == TypeOneofCase.RequestSpawn) {
        output.WriteRawTag(58);
        output.WriteMessage(RequestSpawn);
      }
      if (typeCase_ == TypeOneofCase.Destroy) {
        output.WriteRawTag(66);
        output.WriteMessage(Destroy);
      }
      if (typeCase_ == TypeOneofCase.RequestDestroy) {
        output.WriteRawTag(74);
        output.WriteMessage(RequestDestroy);
      }
      if (typeCase_ == TypeOneofCase.Meme) {
        output.WriteRawTag(82);
        output.WriteMessage(Meme);
      }
      if (typeCase_ == TypeOneofCase.MatchInformation) {
        output.WriteRawTag(90);
        output.WriteMessage(MatchInformation);
      }
      if (typeCase_ == TypeOneofCase.Initialized) {
        output.WriteRawTag(98);
        output.WriteMessage(Initialized);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SenderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderId);
      }
      if (IsServer != false) {
        size += 1 + 1;
      }
      size += recipients_.CalculateSize(_repeated_recipients_codec);
      if (typeCase_ == TypeOneofCase.UpdateTransform) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateTransform);
      }
      if (typeCase_ == TypeOneofCase.NavMeshUpdate) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NavMeshUpdate);
      }
      if (typeCase_ == TypeOneofCase.Spawn) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spawn);
      }
      if (typeCase_ == TypeOneofCase.RequestSpawn) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestSpawn);
      }
      if (typeCase_ == TypeOneofCase.Destroy) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Destroy);
      }
      if (typeCase_ == TypeOneofCase.RequestDestroy) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestDestroy);
      }
      if (typeCase_ == TypeOneofCase.Meme) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meme);
      }
      if (typeCase_ == TypeOneofCase.MatchInformation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MatchInformation);
      }
      if (typeCase_ == TypeOneofCase.Initialized) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Initialized);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Packet other) {
      if (other == null) {
        return;
      }
      if (other.SenderId.Length != 0) {
        SenderId = other.SenderId;
      }
      if (other.IsServer != false) {
        IsServer = other.IsServer;
      }
      recipients_.Add(other.recipients_);
      switch (other.TypeCase) {
        case TypeOneofCase.UpdateTransform:
          if (UpdateTransform == null) {
            UpdateTransform = new global::Net.Realtime.UpdateTransform();
          }
          UpdateTransform.MergeFrom(other.UpdateTransform);
          break;
        case TypeOneofCase.NavMeshUpdate:
          if (NavMeshUpdate == null) {
            NavMeshUpdate = new global::Net.Realtime.NavMeshUpdate();
          }
          NavMeshUpdate.MergeFrom(other.NavMeshUpdate);
          break;
        case TypeOneofCase.Spawn:
          if (Spawn == null) {
            Spawn = new global::Net.Realtime.Spawn();
          }
          Spawn.MergeFrom(other.Spawn);
          break;
        case TypeOneofCase.RequestSpawn:
          if (RequestSpawn == null) {
            RequestSpawn = new global::Net.Realtime.Spawn();
          }
          RequestSpawn.MergeFrom(other.RequestSpawn);
          break;
        case TypeOneofCase.Destroy:
          if (Destroy == null) {
            Destroy = new global::Net.Realtime.Destroy();
          }
          Destroy.MergeFrom(other.Destroy);
          break;
        case TypeOneofCase.RequestDestroy:
          if (RequestDestroy == null) {
            RequestDestroy = new global::Net.Realtime.Destroy();
          }
          RequestDestroy.MergeFrom(other.RequestDestroy);
          break;
        case TypeOneofCase.Meme:
          if (Meme == null) {
            Meme = new global::Net.Realtime.Meme();
          }
          Meme.MergeFrom(other.Meme);
          break;
        case TypeOneofCase.MatchInformation:
          if (MatchInformation == null) {
            MatchInformation = new global::Net.Realtime.MatchInformation();
          }
          MatchInformation.MergeFrom(other.MatchInformation);
          break;
        case TypeOneofCase.Initialized:
          if (Initialized == null) {
            Initialized = new global::Net.Realtime.Initialized();
          }
          Initialized.MergeFrom(other.Initialized);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SenderId = input.ReadString();
            break;
          }
          case 16: {
            IsServer = input.ReadBool();
            break;
          }
          case 26: {
            recipients_.AddEntriesFrom(input, _repeated_recipients_codec);
            break;
          }
          case 34: {
            global::Net.Realtime.UpdateTransform subBuilder = new global::Net.Realtime.UpdateTransform();
            if (typeCase_ == TypeOneofCase.UpdateTransform) {
              subBuilder.MergeFrom(UpdateTransform);
            }
            input.ReadMessage(subBuilder);
            UpdateTransform = subBuilder;
            break;
          }
          case 42: {
            global::Net.Realtime.NavMeshUpdate subBuilder = new global::Net.Realtime.NavMeshUpdate();
            if (typeCase_ == TypeOneofCase.NavMeshUpdate) {
              subBuilder.MergeFrom(NavMeshUpdate);
            }
            input.ReadMessage(subBuilder);
            NavMeshUpdate = subBuilder;
            break;
          }
          case 50: {
            global::Net.Realtime.Spawn subBuilder = new global::Net.Realtime.Spawn();
            if (typeCase_ == TypeOneofCase.Spawn) {
              subBuilder.MergeFrom(Spawn);
            }
            input.ReadMessage(subBuilder);
            Spawn = subBuilder;
            break;
          }
          case 58: {
            global::Net.Realtime.Spawn subBuilder = new global::Net.Realtime.Spawn();
            if (typeCase_ == TypeOneofCase.RequestSpawn) {
              subBuilder.MergeFrom(RequestSpawn);
            }
            input.ReadMessage(subBuilder);
            RequestSpawn = subBuilder;
            break;
          }
          case 66: {
            global::Net.Realtime.Destroy subBuilder = new global::Net.Realtime.Destroy();
            if (typeCase_ == TypeOneofCase.Destroy) {
              subBuilder.MergeFrom(Destroy);
            }
            input.ReadMessage(subBuilder);
            Destroy = subBuilder;
            break;
          }
          case 74: {
            global::Net.Realtime.Destroy subBuilder = new global::Net.Realtime.Destroy();
            if (typeCase_ == TypeOneofCase.RequestDestroy) {
              subBuilder.MergeFrom(RequestDestroy);
            }
            input.ReadMessage(subBuilder);
            RequestDestroy = subBuilder;
            break;
          }
          case 82: {
            global::Net.Realtime.Meme subBuilder = new global::Net.Realtime.Meme();
            if (typeCase_ == TypeOneofCase.Meme) {
              subBuilder.MergeFrom(Meme);
            }
            input.ReadMessage(subBuilder);
            Meme = subBuilder;
            break;
          }
          case 90: {
            global::Net.Realtime.MatchInformation subBuilder = new global::Net.Realtime.MatchInformation();
            if (typeCase_ == TypeOneofCase.MatchInformation) {
              subBuilder.MergeFrom(MatchInformation);
            }
            input.ReadMessage(subBuilder);
            MatchInformation = subBuilder;
            break;
          }
          case 98: {
            global::Net.Realtime.Initialized subBuilder = new global::Net.Realtime.Initialized();
            if (typeCase_ == TypeOneofCase.Initialized) {
              subBuilder.MergeFrom(Initialized);
            }
            input.ReadMessage(subBuilder);
            Initialized = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// General purpose transform update typically shared by several different types of objects
  /// </summary>
  public sealed partial class UpdateTransform : pb::IMessage<UpdateTransform> {
    private static readonly pb::MessageParser<UpdateTransform> _parser = new pb::MessageParser<UpdateTransform>(() => new UpdateTransform());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateTransform> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Net.Realtime.RealtimeReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTransform() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTransform(UpdateTransform other) : this() {
      transform_ = other.transform_ != null ? other.transform_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTransform Clone() {
      return new UpdateTransform(this);
    }

    /// <summary>Field number for the "transform" field.</summary>
    public const int TransformFieldNumber = 1;
    private global::Net.Realtime.Transform transform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Net.Realtime.Transform Transform {
      get { return transform_; }
      set {
        transform_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateTransform);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateTransform other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Transform, other.Transform)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (transform_ != null) hash ^= Transform.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (transform_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Transform);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (transform_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transform);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateTransform other) {
      if (other == null) {
        return;
      }
      if (other.transform_ != null) {
        if (transform_ == null) {
          Transform = new global::Net.Realtime.Transform();
        }
        Transform.MergeFrom(other.Transform);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (transform_ == null) {
              Transform = new global::Net.Realtime.Transform();
            }
            input.ReadMessage(Transform);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NavMeshUpdate : pb::IMessage<NavMeshUpdate> {
    private static readonly pb::MessageParser<NavMeshUpdate> _parser = new pb::MessageParser<NavMeshUpdate>(() => new NavMeshUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NavMeshUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Net.Realtime.RealtimeReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavMeshUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavMeshUpdate(NavMeshUpdate other) : this() {
      id_ = other.id_;
      destination_ = other.destination_ != null ? other.destination_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavMeshUpdate Clone() {
      return new NavMeshUpdate(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "destination" field.</summary>
    public const int DestinationFieldNumber = 2;
    private global::Net.Realtime.Vector3 destination_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Net.Realtime.Vector3 Destination {
      get { return destination_; }
      set {
        destination_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NavMeshUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NavMeshUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Destination, other.Destination)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (destination_ != null) hash ^= Destination.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (destination_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Destination);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (destination_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Destination);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NavMeshUpdate other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.destination_ != null) {
        if (destination_ == null) {
          Destination = new global::Net.Realtime.Vector3();
        }
        Destination.MergeFrom(other.Destination);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 18: {
            if (destination_ == null) {
              Destination = new global::Net.Realtime.Vector3();
            }
            input.ReadMessage(Destination);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Spawn : pb::IMessage<Spawn> {
    private static readonly pb::MessageParser<Spawn> _parser = new pb::MessageParser<Spawn>(() => new Spawn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Spawn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Net.Realtime.RealtimeReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Spawn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Spawn(Spawn other) : this() {
      switch (other.TypeCase) {
        case TypeOneofCase.Any:
          Any = other.Any.Clone();
          break;
        case TypeOneofCase.Tree:
          Tree = other.Tree.Clone();
          break;
        case TypeOneofCase.Animal:
          Animal = other.Animal.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Spawn Clone() {
      return new Spawn(this);
    }

    /// <summary>Field number for the "any" field.</summary>
    public const int AnyFieldNumber = 1;
    /// <summary>
    /// Any object, no special behaviour
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Net.Realtime.Transform Any {
      get { return typeCase_ == TypeOneofCase.Any ? (global::Net.Realtime.Transform) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Any;
      }
    }

    /// <summary>Field number for the "tree" field.</summary>
    public const int TreeFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Net.Realtime.Tree Tree {
      get { return typeCase_ == TypeOneofCase.Tree ? (global::Net.Realtime.Tree) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Tree;
      }
    }

    /// <summary>Field number for the "animal" field.</summary>
    public const int AnimalFieldNumber = 3;
    /// <summary>
    /// TODO: other ?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Net.Realtime.Animal Animal {
      get { return typeCase_ == TypeOneofCase.Animal ? (global::Net.Realtime.Animal) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Animal;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      Any = 1,
      Tree = 2,
      Animal = 3,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Spawn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Spawn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Any, other.Any)) return false;
      if (!object.Equals(Tree, other.Tree)) return false;
      if (!object.Equals(Animal, other.Animal)) return false;
      if (TypeCase != other.TypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (typeCase_ == TypeOneofCase.Any) hash ^= Any.GetHashCode();
      if (typeCase_ == TypeOneofCase.Tree) hash ^= Tree.GetHashCode();
      if (typeCase_ == TypeOneofCase.Animal) hash ^= Animal.GetHashCode();
      hash ^= (int) typeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (typeCase_ == TypeOneofCase.Any) {
        output.WriteRawTag(10);
        output.WriteMessage(Any);
      }
      if (typeCase_ == TypeOneofCase.Tree) {
        output.WriteRawTag(18);
        output.WriteMessage(Tree);
      }
      if (typeCase_ == TypeOneofCase.Animal) {
        output.WriteRawTag(26);
        output.WriteMessage(Animal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (typeCase_ == TypeOneofCase.Any) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Any);
      }
      if (typeCase_ == TypeOneofCase.Tree) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tree);
      }
      if (typeCase_ == TypeOneofCase.Animal) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Animal);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Spawn other) {
      if (other == null) {
        return;
      }
      switch (other.TypeCase) {
        case TypeOneofCase.Any:
          if (Any == null) {
            Any = new global::Net.Realtime.Transform();
          }
          Any.MergeFrom(other.Any);
          break;
        case TypeOneofCase.Tree:
          if (Tree == null) {
            Tree = new global::Net.Realtime.Tree();
          }
          Tree.MergeFrom(other.Tree);
          break;
        case TypeOneofCase.Animal:
          if (Animal == null) {
            Animal = new global::Net.Realtime.Animal();
          }
          Animal.MergeFrom(other.Animal);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Net.Realtime.Transform subBuilder = new global::Net.Realtime.Transform();
            if (typeCase_ == TypeOneofCase.Any) {
              subBuilder.MergeFrom(Any);
            }
            input.ReadMessage(subBuilder);
            Any = subBuilder;
            break;
          }
          case 18: {
            global::Net.Realtime.Tree subBuilder = new global::Net.Realtime.Tree();
            if (typeCase_ == TypeOneofCase.Tree) {
              subBuilder.MergeFrom(Tree);
            }
            input.ReadMessage(subBuilder);
            Tree = subBuilder;
            break;
          }
          case 26: {
            global::Net.Realtime.Animal subBuilder = new global::Net.Realtime.Animal();
            if (typeCase_ == TypeOneofCase.Animal) {
              subBuilder.MergeFrom(Animal);
            }
            input.ReadMessage(subBuilder);
            Animal = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class Destroy : pb::IMessage<Destroy> {
    private static readonly pb::MessageParser<Destroy> _parser = new pb::MessageParser<Destroy>(() => new Destroy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Destroy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Net.Realtime.RealtimeReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Destroy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Destroy(Destroy other) : this() {
      switch (other.TypeCase) {
        case TypeOneofCase.Any:
          Any = other.Any.Clone();
          break;
        case TypeOneofCase.Tree:
          Tree = other.Tree.Clone();
          break;
        case TypeOneofCase.Animal:
          Animal = other.Animal.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Destroy Clone() {
      return new Destroy(this);
    }

    /// <summary>Field number for the "any" field.</summary>
    public const int AnyFieldNumber = 1;
    /// <summary>
    /// Any object, no special behaviour
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Net.Realtime.Transform Any {
      get { return typeCase_ == TypeOneofCase.Any ? (global::Net.Realtime.Transform) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Any;
      }
    }

    /// <summary>Field number for the "tree" field.</summary>
    public const int TreeFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Net.Realtime.Tree Tree {
      get { return typeCase_ == TypeOneofCase.Tree ? (global::Net.Realtime.Tree) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Tree;
      }
    }

    /// <summary>Field number for the "animal" field.</summary>
    public const int AnimalFieldNumber = 3;
    /// <summary>
    /// TODO: other ?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Net.Realtime.Animal Animal {
      get { return typeCase_ == TypeOneofCase.Animal ? (global::Net.Realtime.Animal) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Animal;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      Any = 1,
      Tree = 2,
      Animal = 3,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Destroy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Destroy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Any, other.Any)) return false;
      if (!object.Equals(Tree, other.Tree)) return false;
      if (!object.Equals(Animal, other.Animal)) return false;
      if (TypeCase != other.TypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (typeCase_ == TypeOneofCase.Any) hash ^= Any.GetHashCode();
      if (typeCase_ == TypeOneofCase.Tree) hash ^= Tree.GetHashCode();
      if (typeCase_ == TypeOneofCase.Animal) hash ^= Animal.GetHashCode();
      hash ^= (int) typeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (typeCase_ == TypeOneofCase.Any) {
        output.WriteRawTag(10);
        output.WriteMessage(Any);
      }
      if (typeCase_ == TypeOneofCase.Tree) {
        output.WriteRawTag(18);
        output.WriteMessage(Tree);
      }
      if (typeCase_ == TypeOneofCase.Animal) {
        output.WriteRawTag(26);
        output.WriteMessage(Animal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (typeCase_ == TypeOneofCase.Any) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Any);
      }
      if (typeCase_ == TypeOneofCase.Tree) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tree);
      }
      if (typeCase_ == TypeOneofCase.Animal) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Animal);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Destroy other) {
      if (other == null) {
        return;
      }
      switch (other.TypeCase) {
        case TypeOneofCase.Any:
          if (Any == null) {
            Any = new global::Net.Realtime.Transform();
          }
          Any.MergeFrom(other.Any);
          break;
        case TypeOneofCase.Tree:
          if (Tree == null) {
            Tree = new global::Net.Realtime.Tree();
          }
          Tree.MergeFrom(other.Tree);
          break;
        case TypeOneofCase.Animal:
          if (Animal == null) {
            Animal = new global::Net.Realtime.Animal();
          }
          Animal.MergeFrom(other.Animal);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Net.Realtime.Transform subBuilder = new global::Net.Realtime.Transform();
            if (typeCase_ == TypeOneofCase.Any) {
              subBuilder.MergeFrom(Any);
            }
            input.ReadMessage(subBuilder);
            Any = subBuilder;
            break;
          }
          case 18: {
            global::Net.Realtime.Tree subBuilder = new global::Net.Realtime.Tree();
            if (typeCase_ == TypeOneofCase.Tree) {
              subBuilder.MergeFrom(Tree);
            }
            input.ReadMessage(subBuilder);
            Tree = subBuilder;
            break;
          }
          case 26: {
            global::Net.Realtime.Animal subBuilder = new global::Net.Realtime.Animal();
            if (typeCase_ == TypeOneofCase.Animal) {
              subBuilder.MergeFrom(Animal);
            }
            input.ReadMessage(subBuilder);
            Animal = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class Meme : pb::IMessage<Meme> {
    private static readonly pb::MessageParser<Meme> _parser = new pb::MessageParser<Meme>(() => new Meme());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Meme> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Net.Realtime.RealtimeReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Meme() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Meme(Meme other) : this() {
      id_ = other.id_;
      memeName_ = other.memeName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Meme Clone() {
      return new Meme(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "meme_name" field.</summary>
    public const int MemeNameFieldNumber = 2;
    private string memeName_ = "";
    /// <summary>
    /// Not really efficient but ok
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MemeName {
      get { return memeName_; }
      set {
        memeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Meme);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Meme other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (MemeName != other.MemeName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (MemeName.Length != 0) hash ^= MemeName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (MemeName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MemeName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (MemeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MemeName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Meme other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.MemeName.Length != 0) {
        MemeName = other.MemeName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 18: {
            MemeName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Server sending some information on the current state before starting
  /// </summary>
  public sealed partial class MatchInformation : pb::IMessage<MatchInformation> {
    private static readonly pb::MessageParser<MatchInformation> _parser = new pb::MessageParser<MatchInformation>(() => new MatchInformation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchInformation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Net.Realtime.RealtimeReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchInformation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchInformation(MatchInformation other) : this() {
      seed_ = other.seed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchInformation Clone() {
      return new MatchInformation(this);
    }

    /// <summary>Field number for the "seed" field.</summary>
    public const int SeedFieldNumber = 1;
    private int seed_;
    /// <summary>
    /// TODO: some state config https://heroiclabs.com/docs/tutorial-remote-configuration/
    /// like map size, initial evolution parameters ...
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Seed {
      get { return seed_; }
      set {
        seed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchInformation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchInformation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seed != other.Seed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Seed != 0) hash ^= Seed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Seed != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Seed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Seed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchInformation other) {
      if (other == null) {
        return;
      }
      if (other.Seed != 0) {
        Seed = other.Seed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Seed = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Client notifying being ready to handle gameplay
  /// </summary>
  public sealed partial class Initialized : pb::IMessage<Initialized> {
    private static readonly pb::MessageParser<Initialized> _parser = new pb::MessageParser<Initialized>(() => new Initialized());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Initialized> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Net.Realtime.RealtimeReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Initialized() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Initialized(Initialized other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Initialized Clone() {
      return new Initialized(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Initialized);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Initialized other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Initialized other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// TODO: is it worthwhile to add like "owner_id" ... ?
  /// </summary>
  public sealed partial class Transform : pb::IMessage<Transform> {
    private static readonly pb::MessageParser<Transform> _parser = new pb::MessageParser<Transform>(() => new Transform());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transform> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Net.Realtime.RealtimeReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform(Transform other) : this() {
      id_ = other.id_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform Clone() {
      return new Transform(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::Net.Realtime.Vector3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Net.Realtime.Vector3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 3;
    private global::Net.Realtime.Quaternion rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Net.Realtime.Quaternion Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transform);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transform other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (rotation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Rotation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transform other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Net.Realtime.Vector3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          Rotation = new global::Net.Realtime.Quaternion();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 18: {
            if (position_ == null) {
              Position = new global::Net.Realtime.Vector3();
            }
            input.ReadMessage(Position);
            break;
          }
          case 26: {
            if (rotation_ == null) {
              Rotation = new global::Net.Realtime.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Tree : pb::IMessage<Tree> {
    private static readonly pb::MessageParser<Tree> _parser = new pb::MessageParser<Tree>(() => new Tree());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Tree> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Net.Realtime.RealtimeReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tree() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tree(Tree other) : this() {
      transform_ = other.transform_ != null ? other.transform_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tree Clone() {
      return new Tree(this);
    }

    /// <summary>Field number for the "transform" field.</summary>
    public const int TransformFieldNumber = 1;
    private global::Net.Realtime.Transform transform_;
    /// <summary>
    /// TODO: other stats
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Net.Realtime.Transform Transform {
      get { return transform_; }
      set {
        transform_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Tree);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Tree other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Transform, other.Transform)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (transform_ != null) hash ^= Transform.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (transform_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Transform);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (transform_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transform);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Tree other) {
      if (other == null) {
        return;
      }
      if (other.transform_ != null) {
        if (transform_ == null) {
          Transform = new global::Net.Realtime.Transform();
        }
        Transform.MergeFrom(other.Transform);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (transform_ == null) {
              Transform = new global::Net.Realtime.Transform();
            }
            input.ReadMessage(Transform);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Animal : pb::IMessage<Animal> {
    private static readonly pb::MessageParser<Animal> _parser = new pb::MessageParser<Animal>(() => new Animal());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Animal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Net.Realtime.RealtimeReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Animal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Animal(Animal other) : this() {
      transform_ = other.transform_ != null ? other.transform_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Animal Clone() {
      return new Animal(this);
    }

    /// <summary>Field number for the "transform" field.</summary>
    public const int TransformFieldNumber = 1;
    private global::Net.Realtime.Transform transform_;
    /// <summary>
    /// TODO: other stats
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Net.Realtime.Transform Transform {
      get { return transform_; }
      set {
        transform_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Animal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Animal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Transform, other.Transform)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (transform_ != null) hash ^= Transform.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (transform_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Transform);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (transform_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transform);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Animal other) {
      if (other == null) {
        return;
      }
      if (other.transform_ != null) {
        if (transform_ == null) {
          Transform = new global::Net.Realtime.Transform();
        }
        Transform.MergeFrom(other.Transform);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (transform_ == null) {
              Transform = new global::Net.Realtime.Transform();
            }
            input.ReadMessage(Transform);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vector3 : pb::IMessage<Vector3> {
    private static readonly pb::MessageParser<Vector3> _parser = new pb::MessageParser<Vector3>(() => new Vector3());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Net.Realtime.RealtimeReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3(Vector3 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3 Clone() {
      return new Vector3(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector3 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Quaternion : pb::IMessage<Quaternion> {
    private static readonly pb::MessageParser<Quaternion> _parser = new pb::MessageParser<Quaternion>(() => new Quaternion());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Quaternion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Net.Realtime.RealtimeReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quaternion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quaternion(Quaternion other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      w_ = other.w_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quaternion Clone() {
      return new Quaternion(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 4;
    private float w_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Quaternion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Quaternion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(W, other.W)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (W != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(W);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (W != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(W);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (W != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Quaternion other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.W != 0F) {
        W = other.W;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 37: {
            W = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
